{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "                            __________   ____ \n",
      "          ________ __ _____/ ____/   |  / __ \\\n",
      "         / ___/ __` / __  / /   / /| | / / / /\n",
      "        / /__/ /_/ / /_/ / /___/ ___ |/ /_/ / \n",
      "        \\___/\\__,_/\\__,_/\\____/_/  |_/_____/  \n",
      "        by BlockScience\n",
      "        \n",
      "Execution Mode: single_proc: [<cadCAD.configuration.Configuration object at 0x000001AB331D7128>]\n",
      "Configurations: [<cadCAD.configuration.Configuration object at 0x000001AB331D7128>]\n",
      "step 1\n",
      "available 0 0\n",
      "used: 0 0\n",
      "step 1\n",
      "available 0 0\n",
      "used: 0 0\n",
      "step 1\n",
      "available 0 0\n",
      "used: 0 0\n",
      "step 1\n",
      "available 0 0\n",
      "used: 0 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 7 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n",
      "step 1\n",
      "available 7 0\n",
      "used: 6 0\n",
      "step 1\n",
      "available 7 0\n",
      "used: 2 2\n",
      "step 1\n",
      "available 7 0\n",
      "used: 1 1\n",
      "step 1\n",
      "available 7 0\n",
      "used: 3 3\n"
     ]
    }
   ],
   "source": [
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "# List of all the state variables in the system and their initial values\n",
    "initial_conditions = {\n",
    "    # total tracking of max values\n",
    "    'tot_energy_prod_cap': 0, # total energy produced by the system\n",
    "    'tot_energy_appetite_priority': 0, # amount of energy appetite\n",
    "    'tot_energy_appetite_business': 0, # amount of energy appetite\n",
    "    'tot_energy_appetite_leisure': 0, # amount of energy appetite\n",
    "    # total tracking of actual usage\n",
    "    'tot_energy_cons': 0, # total energy consumed\n",
    "    'tot_energy_cons_priority': 0, # amount of energy consumed\n",
    "    'tot_energy_cons_business': 0, # amount of energy consumed\n",
    "    'tot_energy_cons_leisure': 0, # amount of energy consumed\n",
    "    'tot_bat_use': 0,\n",
    "    # time tracking\n",
    "    'hour_of_day': 0, # 24 hour days\n",
    "    'day_number': 0, # number of days passed tracker\n",
    "    # timestep energy tracking\n",
    "    't_energy_prod_cap': 0, # amount of energy the solartainer can produce this timestep\n",
    "    't_energy_cons': 0,\n",
    "    # limited mechanics tracking\n",
    "    'bat_level': 0, # amount of energy currently stored in the battery  \n",
    "    'bat_lim': 10, # kWh\n",
    "    'max_price_per_kwh': 0.13 # EUR cents\n",
    "}\n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "\n",
    "\n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "# Settings of general simulation parameters, unrelated to the system itself\n",
    "# `T` is a range with the number of discrete units of time the simulation will run for;\n",
    "# `N` is the number of times the simulation will be run (Monte Carlo runs)\n",
    "# `M` is not currently used\n",
    "simulation_parameters = {\n",
    "    'T': range(10),\n",
    "    'N': 1,\n",
    "    'M': {}\n",
    "}\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  \n",
    "# Specify the Solartainer production and battery logic in a Policy function\n",
    "def solartainer_produce(params, step, sL, s):\n",
    "    # calculate production from random variables\n",
    "    # based on timestep add:\n",
    "        # annual production variance\n",
    "        # daily production variance\n",
    "        # hourly production variance\n",
    "    t_energy_prod_cap = 7 # random.random()*5\n",
    "    return({'t_energy_prod_cap': t_energy_prod_cap})\n",
    "\n",
    "# Specify the user of electricity logic in a Policy function\n",
    "def consume_electricity(params, step, sL, s, energy_appetite, use_bat):\n",
    "    print('step', step)\n",
    "    print('available', s['t_energy_prod_cap'], s['t_energy_cons'])\n",
    "    energy_avail_prod = s['t_energy_prod_cap'] - s['t_energy_cons']\n",
    "    energy_cons_prod = min(energy_avail_prod, energy_appetite)\n",
    "    if use_bat:\n",
    "        energy_cons_bat = min(energy_appetite, s['bat_level'])\n",
    "    else:\n",
    "        energy_cons_bat = 0\n",
    "    print('used:', energy_cons_prod, energy_cons_bat)\n",
    "    return(energy_cons_prod, energy_cons_bat)\n",
    "\n",
    "def userGroup_priority(params, step, sL, s):\n",
    "    # calculate energy appetite from random variables, something about the state?\n",
    "    energy_appetite =  3 #random.random()*2\n",
    "    # consume electricity based on appetite\n",
    "    energy_cons_prod, energy_cons_bat = consume_electricity(params, step, sL, s, energy_appetite, use_bat=True)\n",
    "    energy_cons = energy_cons_prod + energy_cons_bat\n",
    "    return({'energy_appetite_priority': energy_appetite,\n",
    "            'energy_cons_priority': energy_cons, \n",
    "            't_energy_cons': energy_cons, \n",
    "            'energy_cons_bat': energy_cons_bat})\n",
    "\n",
    "def userGroup_business(params, step, sL, s):\n",
    "    # calculate energy appetite from random variables, something about the state?\n",
    "    energy_appetite =  2 #random.random()*1\n",
    "    # consume electricity based on appetite\n",
    "    energy_cons_prod, energy_cons_bat = consume_electricity(params, step, sL, s, energy_appetite, use_bat=True)\n",
    "    energy_cons = energy_cons_prod + energy_cons_bat\n",
    "    return({'energy_appetite_business': energy_appetite,\n",
    "            'energy_cons_business': energy_cons, \n",
    "            't_energy_cons': energy_cons, \n",
    "            'energy_cons_bat': energy_cons_bat})\n",
    "\n",
    "def userGroup_leisure(params, step, sL, s):\n",
    "    # calculate energy appetite from random variables, something about the state?\n",
    "    energy_appetite = 1 #random.random()*1\n",
    "    # consume electricity based on appetite\n",
    "    energy_cons_prod, energy_cons_bat = consume_electricity(params, step, sL, s, energy_appetite, use_bat=True)\n",
    "    energy_cons = energy_cons_prod + energy_cons_bat\n",
    "    return({'energy_appetite_leisure': energy_appetite,\n",
    "            'energy_cons_leisure': energy_cons, \n",
    "            't_energy_cons': energy_cons, \n",
    "            'energy_cons_bat': energy_cons_bat})\n",
    "\n",
    "# Specify the actions of the battery based on leftover electricity\n",
    "def battery_tracker(params, step, sL, s):\n",
    "    # calculate energy appetite based on battery cap\n",
    "    energy_appetite = s['bat_lim'] - s['bat_level']\n",
    "    # consume electricity based on appetite\n",
    "    energy_cons_prod, energy_cons_bat = consume_electricity(params, step, sL, s, energy_appetite, use_bat=False)\n",
    "    energy_cons = energy_cons_prod\n",
    "    return({'energy_cons_bybat': energy_cons,\n",
    "            't_energy_cons': energy_cons})\n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n",
    "    \n",
    "    \n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "# We make the state update functions less \"intelligent\",\n",
    "# ie. they simply add the amount of electricity produced / consumed\n",
    "# (which, per the policy function definition, may be negative)\n",
    "\n",
    "# update potential max values\n",
    "def increment_tot_energy_prod_cap(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_prod_cap'\n",
    "    x = s['tot_energy_prod_cap'] + _input['t_energy_prod_cap']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_t_energy_prod_cap(params, step, sL, s, _input):\n",
    "    y = 't_energy_prod_cap'\n",
    "    x = _input['t_energy_prod_cap']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_appetite_priority(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_appetite_priority'\n",
    "    x = s['tot_energy_appetite_priority'] + _input['energy_appetite_priority']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_appetite_business(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_appetite_business'\n",
    "    x = s['tot_energy_appetite_business'] + _input['energy_appetite_business']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_appetite_leisure(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_appetite_leisure'\n",
    "    x = s['tot_energy_appetite_leisure'] + _input['energy_appetite_leisure']\n",
    "    return (y, x)\n",
    "\n",
    "# update actual use values\n",
    "def increment_tot_energy_cons(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_cons'\n",
    "    x = s['tot_energy_cons'] + _input['t_energy_cons']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_cons_priority(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_cons_priority'\n",
    "    x = s['tot_energy_cons_priority'] + _input['energy_cons_priority']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_cons_business(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_cons_business'\n",
    "    x = s['tot_energy_cons_business'] + _input['energy_cons_business']\n",
    "    return (y, x)\n",
    "\n",
    "def increment_tot_energy_cons_leisure(params, step, sL, s, _input):\n",
    "    y = 'tot_energy_cons_leisure'\n",
    "    x = s['tot_energy_cons_leisure'] + _input['energy_cons_leisure']\n",
    "    return (y, x)\n",
    "\n",
    "# update tot battery usage\n",
    "def increment_tot_bat_use(params, step, sL, s, _input):\n",
    "    y = 'tot_bat_use'\n",
    "    x = s['tot_bat_use'] + _input['energy_cons_bat']\n",
    "    return (y, x)\n",
    "\n",
    "# update battery state\n",
    "def increment_bat_level(params, step, sL, s, _input):\n",
    "    y = 'bat_level'\n",
    "    x = s['bat_level'] + _input['energy_cons_bybat'] - _input['energy_cons_bat']\n",
    "    return (y, x)\n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "# In the Partial State Update Blocks, \n",
    "# the user specifies if state update functions will be run in series or in parallel\n",
    "# and the policy functions that will be evaluated in that block\n",
    "partial_state_update_blocks = [\n",
    "    { \n",
    "        'policies': { # The following policy functions will be evaluated and their returns will be passed to the state update functions\n",
    "            'solartainer_produce': solartainer_produce,\n",
    "            'userGroup_priority': userGroup_priority,\n",
    "            'userGroup_business': userGroup_business,\n",
    "            'userGroup_leisure': userGroup_leisure,\n",
    "            'battery_tracker': battery_tracker\n",
    "        },\n",
    "        'variables': { # The following state variables will be updated simultaneously\n",
    "            'tot_energy_prod_cap': increment_tot_energy_prod_cap,\n",
    "            't_energy_prod_cap': increment_t_energy_prod_cap,\n",
    "            'tot_energy_appetite_priority': increment_tot_energy_appetite_priority,\n",
    "            'tot_energy_appetite_business': increment_tot_energy_appetite_business,\n",
    "            'tot_energy_appetite_leisure': increment_tot_energy_appetite_leisure,\n",
    "            'tot_energy_cons': increment_tot_energy_cons,\n",
    "            'tot_energy_cons_priority': increment_tot_energy_cons_priority,\n",
    "            'tot_energy_cons_business': increment_tot_energy_cons_business,\n",
    "            'tot_energy_cons_leisure': increment_tot_energy_cons_leisure,\n",
    "            'tot_bat_use': increment_tot_bat_use,\n",
    "            'bat_level': increment_bat_level\n",
    "            \n",
    "        }\n",
    "    }\n",
    "]\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "\n",
    "\n",
    "from cadCAD.configuration import Configuration\n",
    "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # \n",
    "# The configurations above are then packaged into a `Configuration` object\n",
    "config = Configuration(initial_state=initial_conditions, #dict containing variable names and initial values\n",
    "                       partial_state_update_blocks=partial_state_update_blocks, #dict containing state update functions\n",
    "                       sim_config=simulation_parameters #dict containing simulation parameters\n",
    "                      )\n",
    "\n",
    "from cadCAD.engine import ExecutionMode, ExecutionContext, Executor\n",
    "exec_mode = ExecutionMode()\n",
    "exec_context = ExecutionContext(exec_mode.single_proc)\n",
    "executor = Executor(exec_context, [config]) # Pass the configuration object inside an array\n",
    "raw_result, tensor = executor.execute() # The `execute()` method returns a tuple; its first elements contains the raw results\n",
    "\n",
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "df = pd.DataFrame(raw_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot('timestep', ['tot_energy_prod_cap', 'tot_energy_appetite_priority', 'tot_energy_appetite_business', 'tot_energy_appetite_leisure'], grid=True);\n",
    "df.plot('timestep', ['tot_energy_cons', 'tot_energy_cons_priority', 'tot_energy_cons_business', 'tot_energy_cons_leisure'], grid=True);\n",
    "df.plot('timestep', ['tot_energy_cons_priority', 'tot_energy_cons_business', 'tot_energy_cons_leisure', 'bat_level'], grid=True);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
